<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Server
//hostPort = 7777;

//turn off endless upgraded arrows
frostFireUPgrade = false;
frostFireLightningUpgrade = false;
//

if(objTextBoxPort.port == "")
{
    hostPort = 7777;
}
else
{
    hostPort = real(objTextBoxPort.port);
}
server = network_create_server(network_socket_tcp,hostPort,3);
buffer = buffer_create(1024,buffer_fixed,1);
drawBuffer = buffer_create(32768,buffer_grow,1);
playerBuffer = buffer_create(32768,buffer_grow,1);
socketList = ds_list_create();
ipList = ds_list_create();
portList = ds_list_create();

numClients = 0;

sendState = 0;

mTimeout[1] = 300;
mTimeout[2] = 300;
mTimeout[3] = 300;
//timeout = false;
errMsg = "";


///Send request to IP service
async_event = http_get( "http://ipv4bot.whatismyipaddress.com/" );
myIP = "";
showIP = false;

drawCounter = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*with(objClientReticle)
{
    instance_destroy();
}*/

network_destroy(server);
buffer_delete(buffer);
ds_list_destroy(socketList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timeout Go To Main Menu
room_goto(rmMainMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// make host the chief for now
isChief = true;
// remove after testing

//Check for client timeout
for(t = 0; t &lt; numClients; t++)
{
    mTimeout[t+1]--;
    if(mTimeout[t+1] &lt;= 0)
    {
        //scrMultiplayerSave();
        if(errMsg == "")
        {
            errMsg = "Player " + string(t+2) + " has disconnected.##Going to Main Menu.";
            alarm[0] = 180;
            scrSendError();
        }
    }
}

if(room == rmLobby)
{
    state = stateLobby;
    scrSendState();
}

if(state == stateStart)
{
    mDone[0] = true;
    var allReady = true;
    for(i = 0; i&lt;=numClients; i++)
    {
        if(!mDone[i])
        {
            allReady = false;
        }
    }
    
    if(allReady)
    {
        state = stateInitial;
        scrSendState();
    }
}

else if(state == stateInitial)
{
    if(room == rmGame)
    {
        //create rooms
        var rm0 = instance_create(room_width/2, room_height*7/8, objRoom3Down);
        scrSendRoom(rm0);
       
         var rm1 = instance_create(room_width*3/8, room_height*11/16, objRoom3Right);
        scrSendRoom(rm1);
        var rm2 = instance_create(room_width*5/8, room_height*11/16, objRoom3Left);
        scrSendRoom(rm2);
        
        var rm3 = instance_create(room_width/4, room_height/2, objRoom3Right);
        scrSendRoom(rm3);
        var rm4 = instance_create(room_width/2, room_height/2, objRoom4);
        scrSendRoom(rm4);
        var rm5 = instance_create(room_width*3/4, room_height/2, objRoom3Left);
        scrSendRoom(rm5);
        
        var rm6 = instance_create(room_width*3/8, room_height*5/16, objRoom3Right);
        scrSendRoom(rm6);
        var rm7 = instance_create(room_width*5/8, room_height*5/16, objRoom3Left);
        scrSendRoom(rm7);
        
        var rm8 = instance_create(room_width/2, room_height*1/8, objRoom1);
        scrSendRoom(rm8);
        
        //create hallways
        var hw0 = instance_create(room_width/2, room_height*11/16, objHallway);
        scrSendRoom(hw0);
        
        var hw1 = instance_create(room_width*3/8, room_height/2, objHallway);
        scrSendRoom(hw1);
        var hw2 = instance_create(room_width*5/8, room_height/2, objHallway);
        scrSendRoom(hw2);
        
        var hw3 = instance_create(room_width/2, room_height*5/16, objHallway);
        scrSendRoom(hw3);
        
        


        for(i = 0; i &lt;= numClients; i++)
        {
            if(i == chiefPlayer)
            {
                for(c = 0; c&lt;= numClients; c++)
                {
                    security[securityCount] = instance_create(0,0,objSecurity);
                    security[securityCount].player = i;                    
                    scrSendPlayer(security[securityCount],i,true);
                    securityCount++;
                }
            }
            else
            {
                theif[i] = instance_create(0,0,objTheif);
                theif[i].player = i;
                scrSendPlayer(theif[i],i,false);
            }
        }
        
        
        state = stateInitial2;
        scrSendState();
    }
    
}

else if(state == stateInitial2)
{
    //populate connected rooms
    scrConnectRooms();
    scrConnectClientRooms();
    
    state = statePickMovement;
    scrSendState();
}

else if(state == statePickCards)
{

}

else if(state == stateExecuteCards)
{

}

else if(state == statePickMovement)
{
    
    if(isChief)
    {
        scrHostPickSecurityMovement();
    }
    else
    {
        scrHostPickMovement();
    }
    scrHighlightMovement();
}

else if(state == stateExecuteMovement)
{
    with(objSpace)
    {
        sprite_index = sprSpace;
    }
    scrHostExecuteMovement();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(ds_map_find_value(async_load, "type"))
{
    case network_type_connect:
        var socket = ds_map_find_value(async_load,"socket");
        ds_list_add(socketList, socket);
        var ip = ds_map_find_value(async_load, "ip");
        ds_list_add(ipList, ip);
        var port = ds_map_find_value(async_load,"port");
        ds_list_add(portList, port);
        numClients++;
        scrSendNumClients();
    break;
    case network_type_disconnect:
        var socket = ds_map_find_value(async_load, "socket");
        var findSocket = ds_list_find_index(socketList, socket);
        var ip = string(ds_map_find_value(async_load, "ip"));
        var findIP = ds_list_find_index(ipList, ip);
        var port = ds_map_find_value(async_load,"port");
        var findPort = ds_list_find_index(ipList, port);
        if(findSocket&gt;=0)
        {
            ds_list_delete(socketList, findSocket);
        }
        if(findIP &gt;=0)
        {
            ds_list_delete(ipList, findIP);
        }
        if(findPort &gt;= 0)
        {
            ds_list_delete(portList, findPort);
        }
        numClients--;
        scrSendNumClients();
    break;
    case network_type_data:
        var buff = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        var ip = string(ds_map_find_value(async_load, "ip"));
        var port = ds_map_find_value(async_load,"port");
        scrServerReceivedPacket(buff,socket,ip,port);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HTTP async
//var str;

if ( ds_map_find_value(async_load, "id") == async_event ) {
    if ( ds_map_find_value(async_load, "status") == 0 ) {

        myIP = ds_map_find_value(async_load, "result");
        //show_message_async( "Your public IP address is " + str );
        //instance_destroy();

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
buffer_delete(buffer);
ds_list_destroy(socketList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_text(5, 5, "numClients: " + string(numClients));//
draw_text(5, 30, "currentSecurity " + string(currentSecurity));
if(instance_exists(security[1]))
{
draw_text(5, 55, "donePicking[0]: " + string(security[0].donePicking));
draw_text(5, 80, "donePicking[1]: " + string(security[1].donePicking));
}
draw_text(5, 105, "mDone[0] " + string(mDone[0]));

if(room == rmLobby &amp;&amp; showIP)
{
    scrDrawTextOutline("IP Address: " + myIP,objIPButton.x-objIPButton.sprite_width/2,objIPButton.y-objIPButton.sprite_height*3/4,c_white,c_black);
}
//draw_text(5, 80, "clientY: " + string(displayy));
//draw_text(5, 105, "clientClicked: " + string(displayClicked));

if(errMsg != "")
{
    draw_set_halign(fa_center);
    scrDrawTextOutline(errMsg,view_wview[0]/2,view_hview[0]/2,c_white,c_black);
    draw_set_halign(fa_left);
}

/*drawCounter++;
if(state == statePickMovement)
{
    if(isChief)
    {
        for(i=0; i&lt;=numClients; i++)
        {
            if(instance_exists(security[i].currentSpace) &amp;&amp; instance_exists(mSecurityChosenSpace[i]))
            {
                var x1 = security[i].currentSpace.x;
                var y1 = security[i].currentSpace.y;
                var x2 = mSecurityChosenSpace[i].x;
                var y2 = mSecurityChosenSpace[i].y;
                draw_sprite_ext(sprMovementArrow,drawCounter div 4,x1,y1,point_distance(x1,y1,x2,y2)/sprite_get_width(sprMovementArrow),1,point_direction(x1,y1,x2,y2),c_white,1);
            }
        }
    }
    else
    {
        if(instance_exists(currentSpace) &amp;&amp; instance_exists(chosenSpace))
            {
                var x1 = currentSpace.x;
                var y1 = currentSpace.y;
                var x2 = chosenSpace.x;
                var y2 = chosenSpace.y;
                draw_sprite_ext(sprMovementArrow,drawCounter div 4,x1,y1,point_distance(x1,y1,x2,y2)/sprite_get_width(sprMovementArrow),1,point_direction(x1,y1,x2,y2),c_white,1);
            }
    }
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawCounter++;
if(state == statePickMovement)
{
    if(isChief)
    {
        for(i=0; i&lt;=numClients; i++)
        {
            if(instance_exists(security[i].currentSpace) &amp;&amp; instance_exists(mSecurityChosenSpace[i]))
            {
                var x1 = security[i].currentSpace.x;
                var y1 = security[i].currentSpace.y;
                var x2 = mSecurityChosenSpace[i].x;
                var y2 = mSecurityChosenSpace[i].y;
                draw_sprite_ext(sprMovementArrow,drawCounter div 4,x1,y1,point_distance(x1,y1,x2,y2)/sprite_get_width(sprMovementArrow),1,point_direction(x1,y1,x2,y2),c_white,1);
            }
        }
    }
    else
    {
        if(instance_exists(currentSpace) &amp;&amp; instance_exists(chosenSpace))
            {
                var x1 = currentSpace.x;
                var y1 = currentSpace.y;
                var x2 = chosenSpace.x;
                var y2 = chosenSpace.y;
                draw_sprite_ext(sprMovementArrow,drawCounter div 4,x1,y1,point_distance(x1,y1,x2,y2)/sprite_get_width(sprMovementArrow),1,point_direction(x1,y1,x2,y2),c_white,1);
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(objTextBoxIP.ip == "")
{
    IPAddress = "127.0.0.1"
}
else
{
    IPAddress = objTextBoxIP.ip;
}
if(objTextBoxPort.port == "")
{
    remotePort = 7777;
}
else
{
    remotePort = real(objTextBoxPort.port);
}

socket = network_create_socket(network_socket_tcp);
network_connect(socket, IPAddress, remotePort);
buffer = buffer_create(1024, buffer_grow, 1);

allsprites = ds_list_create();
sprites = 0;

playerSprites = ds_list_create();
numPlayerSprites = 0;
//currArrow = 0;

ping = noone;

//player = 0;
ready = false;


buffer_seek(buffer, buffer_seek_start,0);
buffer_write(buffer, buffer_u8,netInitialRequest);
buffer_write(buffer, buffer_string,version);
alarm[1] = 30;
network_send_packet(socket,buffer,buffer_tell(buffer));

alarm[2] = 1;//send first ping
result = 0;//

numPlayers = 0;
lobbyCounter = 0;

paused = false;

serverTimeout = 300;
errMsg = "";

isChief = false;

drawCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(socket);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Error Alarm
room_goto(rmMainMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ping Alarm

buffer_seek(buffer, buffer_seek_start,0);
buffer_write(buffer, buffer_u8,netPing);
buffer_write(buffer, buffer_u32, current_time);
network_send_packet(socket,buffer, buffer_tell(buffer));
alarm[2] = 30;//ping ever half second
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(state == stateInitial)
{
    if(room != rmGame)
    {
        room_goto(rmGame);
    }
}
if(state == statePickCards)
{
    for(i=0;i&lt;ds_list_size(playerHand[playerNumber])i++)
    {
        var tCard = ds_list_find_value(playerHand[playerNumber],i);
        tCard.x = view_wview[0]-sprite_get_width(sprMiniCard)*(i+1);
        tCard.y = view_hview[0]-sprite_get_height(sprMiniCard);  
        tCard.visible = true;     
    }
}

if(state == stateExecuteCards)
{

}

if(state == statePickMovement)
{
    if(isChief)
    {
        scrClientPickSecurityMovement();
    }
    else
    {
        scrClientPickMovement();
    }
    scrHighlightMovement();
}

if(state == stateExecuteMovement)
{
    currentSecurity = noone;
    for(i = 0; i &lt;= numClients; i++)
    {
        security[i].donePicking = false;
    }
    with(objSpace)
    {
        sprite_index = sprSpace;
    }
    
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(ds_map_find_value(async_load, "type"))
{
    case network_type_data:
        var buff = ds_map_find_value(async_load, "buffer");
        //buffer_seek(buff, buffer_seek_start, 0);
        scrClientReceivedPacket(buff);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(socket);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_set_halign(fa_right);
draw_set_font(fntPing);
scrDrawTextOutline("Ping: " + string(ping), view_wview[0] -32, 8,c_white,c_black);  


draw_set_font(fntUpgrade);
draw_set_halign(fa_left);

draw_text(5, 30, "numClients: " + string(numClients));//
draw_text(5, 55, "state: " + string(state));//
draw_text(5, 80, "currentSecurity " + string(currentSecurity));
if(instance_exists(security[0]))
{
draw_text(5, 105, "donePicking: " + string(security[0].donePicking));
}
if(instance_exists(mSecurityChosenSpace[0]))
{
draw_text(5, 130, "chosenSpace: " + string(mSecurityChosenSpace[0]));
}


if(errMsg != "")
{
    draw_set_halign(fa_center);
    scrDrawTextOutline(errMsg,view_wview[0]/2,view_hview[0]/2,c_white,c_black);
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawCounter++;
if(state == statePickMovement)
{
    if(isChief)
    {
        for(i=0; i&lt;=numClients; i++)
        {
            if(instance_exists(security[i].currentSpace) &amp;&amp; instance_exists(mSecurityChosenSpace[i]))
            {
                var x1 = security[i].currentSpace.x;
                var y1 = security[i].currentSpace.y;
                var x2 = mSecurityChosenSpace[i].x;
                var y2 = mSecurityChosenSpace[i].y;
                draw_sprite_ext(sprMovementArrow,drawCounter div 4,x1,y1,point_distance(x1,y1,x2,y2)/sprite_get_width(sprMovementArrow),1,point_direction(x1,y1,x2,y2),c_white,1);
            }
        }
    }
    else
    {
        if(instance_exists(theif[playerNumber].currentSpace) &amp;&amp; instance_exists(chosenSpace))
            {
                var x1 = theif[playerNumber].currentSpace.x;
                var y1 = theif[playerNumber].currentSpace.y;
                var x2 = chosenSpace.x;
                var y2 = chosenSpace.y;
                draw_sprite_ext(sprMovementArrow,drawCounter div 4,x1,y1,point_distance(x1,y1,x2,y2)/sprite_get_width(sprMovementArrow),1,point_direction(x1,y1,x2,y2),c_white,1);
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
